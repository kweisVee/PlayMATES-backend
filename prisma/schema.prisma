// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  username  String      @unique
  email     String      @unique
  password  String
  city      String?
  state     String?
  country   String?
  role      Role        @default(USER)  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  createdSports Sport[] @relation("UserCreatedSports")
  meetups      Meetup[] // One User can create many Meetups
  // meetups MEETUP[]
}

model Sport {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  definition  String?
  imageUrl    String?   // NEW: URL to sport icon/image
  category    String?   // NEW: Sport category (e.g., "Team Sport", "Racquet Sport")
  isActive    Boolean   @default(true)
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creator     User     @relation("UserCreatedSports", fields: [createdBy], references: [id])
  meetups     Meetup[] // One Sport can have many Meetups
  
  /* 
  Why do I need createdBy Int and creator User?
  This is the foreign key column in the database. It stores the ID of the user who created the sport. It's just a number.
  creator User @relation(...)
  This tells Prisma how to link the createdBy ID to a User record, so you can write code like:

  const sport = await prisma.sport.findFirst({
    include: { creator: true }
  });
  console.log(sport.creator.firstName);
  Without the creator relation, you can't fetch the related User object â€” only the numeric ID (createdBy).
  */
}

model Meetup {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  maxParticipants Int
  sportId         Int
  createdBy       Int
  location        String?
  scheduledAt     DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  sport      Sport     @relation(fields: [sportId], references: [id])
  creator    User      @relation(fields: [createdBy], references: [id])
}